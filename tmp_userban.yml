- name: Requeue autom√°tico CON FILTRO DE USUARIOS PROBLEM√ÅTICOS - ACCI√ìN REAL
  hosts: all
  become: yes
  vars:
    ansible_become_exe: "sudo -n"
    tmp_threshold_gb: 0.1  # 100MB para prueba (bajo para detectar el archivo de 1GB)
    
  tasks:
    - name: Obtener hostname completo
      command: hostname -f
      register: hostname_full
      changed_when: false
      
    - name: Detectar usuarios problem√°ticos
      shell: |
        find /tmp -maxdepth 1 -type f -exec stat -c "%U" {} \; 2>/dev/null | \
        sort | uniq | \
        while read user; do
          size=$(find /tmp -maxdepth 1 -user "$user" -type f -exec du -k {} \; 2>/dev/null | awk '{sum+=$1} END {print sum+0}')
          size_gb=$(echo "scale=2; $size/1024/1024" | bc)
          if (( $(echo "$size_gb > {{ tmp_threshold_gb }}" | bc -l) )); then
            echo "$user:$size_gb GB"
          fi
        done
      register: problematic_users_raw
      changed_when: false
      failed_when: false
      
    - name: Extraer nombres de usuarios problem√°ticos
      set_fact:
        problematic_users: "{{ problematic_users_raw.stdout_lines | map('regex_replace', '(.*):.*', '\\1') | list }}"
        
    - name: Encontrar nodo alternativo
      shell: |
        sinfo -p short -h -o "%N" | tr ',' '\n' | grep -v {{ hostname_full.stdout }} | grep -v down | head -1 || echo "NO_ALTERNATIVE"
      register: alternative_node
      changed_when: false
      failed_when: false
      
    - name: Verificar jobs en este nodo
      shell: |
        squeue -h -w {{ hostname_full.stdout }} -o "%i:%u:%j:%T" 2>/dev/null || echo "NO_JOBS"
      register: running_jobs
      changed_when: false
      failed_when: false
      
    - name: Mostrar estado inicial
      debug:
        msg: |
          "üîç ESTADO INICIAL:"
          "Nodo: {{ hostname_full.stdout }}"
          "Usuarios problem√°ticos: {{ problematic_users }} ({{ problematic_users_raw.stdout_lines }})"
          "Nodo alternativo: {{ alternative_node.stdout }}"
          "Jobs encontrados: {{ running_jobs.stdout_lines | length }}"
        
    - name: Salir si no hay jobs
      debug:
        msg: "‚úÖ No hay jobs - nada que hacer"
      when: running_jobs.stdout == "NO_JOBS"
      
    - name: Procesar jobs
      block:
        - name: Drainear nodo
          shell: |
            scontrol update NodeName={{ hostname_full.stdout }} State=DRAIN Reason="Limpieza usuarios problem√°ticos"
          failed_when: false
          
        - name: Esperar 10 segundos
          pause:
            seconds: 10
            
        - name: Procesar cada job
          shell: |
            {% for job_line in running_jobs.stdout_lines %}
            {% set jobid = job_line.split(':')[0] %}
            {% set user = job_line.split(':')[1] %}
            {% set jobname = job_line.split(':')[2] %}
            {% set state = job_line.split(':')[3] %}
            
            {% if user in problematic_users %}
            echo "üî¥ CANCELANDO job {{ jobid }} ({{ user }} - {{ jobname }}) - USUARIO PROBLEM√ÅTICO"
            scancel {{ jobid }}
            {% else %}
            echo "üü¢ REQUEUE job {{ jobid }} ({{ user }} - {{ jobname }})"
            scontrol requeue {{ jobid }}
            {% endif %}
            {% endfor %}
          args:
            executable: /bin/bash
          failed_when: false
          
        - name: Esperar 5 segundos
          pause:
            seconds: 5
          
        - name: Reactivar nodo
          shell: |
            scontrol update NodeName={{ hostname_full.stdout }} State=RESUME
          failed_when: false
          
        - name: Resultado final
          debug:
            msg: |
              "‚úÖ OPERACI√ìN COMPLETADA en {{ hostname_full.stdout }}"
              "Usuarios problem√°ticos: {{ problematic_users }}"
              "Jobs procesados: {{ running_jobs.stdout_lines | length }}"
      when: running_jobs.stdout != "NO_JOBS"
