- name: PRUEBA REAL - Requeue FORZADO
  hosts: all
  become: yes
  gather_facts: no
  vars:
    ansible_become_exe: "sudo -n"
    max_wait_minutes: 2
    check_interval_seconds: 15
    
  tasks:
    - name: Obtener hostname completo
      command: hostname -f
      register: hostname_full
      changed_when: false
      
    - name: Verificar jobs corriendo en SLURM
      shell: squeue -h -w {{ hostname_full.stdout }} -o "%i:%u:%j:%T:%N:%P" 2>/dev/null
      register: running_jobs
      changed_when: false
      failed_when: false
      
    - name: Mostrar jobs encontrados
      debug:
        msg: "Jobs encontrados: {{ running_jobs.stdout_lines }}"
        
    - name: Salir si no hay jobs
      meta: end_play
      when: running_jobs.stdout == ""
      
    - name: Drainear nodo (REAL)
      shell: |
        scontrol update NodeName={{ hostname_full.stdout }} State=DRAIN Reason="Requeue forzado - timeout {{ max_wait_minutes }}min"
      register: drain_result
      failed_when: false
      
    - name: Esperar 30 segundos para que SLURM reaccione al drain
      pause:
        seconds: 30
      
    - name: CANCELAR Y REQUEUE MANUAL (FORZADO)
      shell: |
        # Obtener todos los jobs en el nodo
        for job_line in $(squeue -h -w {{ hostname_full.stdout }} -o "%i:%u:%j:%T:%N:%P" 2>/dev/null); do
          jobid=$(echo $job_line | cut -d: -f1)
          user=$(echo $job_line | cut -d: -f2)
          jobname=$(echo $job_line | cut -d: -f3)
          state=$(echo $job_line | cut -d: -f4)
          
          echo "Procesando job $jobid ($jobname) - Estado: $state"
          
          if [ "$state" = "RUNNING" ]; then
            echo "CANCELANDO job RUNNING $jobid para requeue..."
            scancel --requeue --signal=KILL $jobid
          else
            echo "Requeueando job $jobid (estado: $state)..."
            scancel --requeue $jobid
          fi
        done
      args:
        executable: /bin/bash
      register: cancel_result
      failed_when: false
      
    - name: Esperar 45 segundos para procesamiento
      pause:
        seconds: 45
      
    - name: Verificar estado de los jobs originales
      shell: |
        # Verificar cada job original
        {% for job_line in running_jobs.stdout_lines %}
          jobid="{{ job_line.split(':')[0] }}"
          echo "Job {{ jobid }}:"
          squeue -j $jobid -o "%i:%j:%N:%T:%P" 2>/dev/null || echo "  NO_ENCONTRADO"
        {% endfor %}
      register: final_job_status
      
    - name: Mostrar estado final de jobs
      debug:
        msg: "Estado final de jobs: {{ final_job_status.stdout_lines }}"
        
    - name: Reactivar nodo
      shell: |
        scontrol update NodeName={{ hostname_full.stdout }} State=RESUME
      register: resume_result
      
    - name: Resultado final
      debug:
        msg:
          - "OPERACIÓN COMPLETADA en {{ hostname_full.stdout }}"
          - "Jobs iniciales: {{ running_jobs.stdout_lines }}"
          - "Acción tomada: {{ cancel_result.stdout }}"
          - "Estado final: {{ final_job_status.stdout }}"
          - "Nodo reactivado: {{ 'SÍ' if resume_result.rc == 0 else 'NO' }}"
