---
- name: Limpieza automática de /tmp usando Ansible nativo
  hosts: all
  become: yes
  
  vars:
    ansible_become_exe: "sudo -n"
    ansible_become_flags: ""
    mtime_days: 1
    protected_paths:
      - "/tmp/systemd-*"
      - "/tmp/.font-unix*"
      - "/tmp/.ICE-unix*"
      - "/tmp/.Test-unix*"
      - "/tmp/.X11-unix*"
      - "/tmp/.XIM-unix*"
      - "/tmp/snap-private-tmp*"
      - "/tmp/slurm*"  # Añadimos protección para archivos SLURM
    
  tasks:
    - name: Verificar si /tmp tiene loop device
      shell: mount | grep 'loop.*on /tmp'
      register: loop_check
      failed_when: false
      changed_when: false
      
    - name: Saltar si hay loop device
      meta: end_host
      when: loop_check.rc == 0
      
    - name: Obtener hostname completo
      command: hostname -f
      register: hostname_full
      changed_when: false
      
    - name: Verificar jobs corriendo en SLURM (versión robusta)
      shell: |
        set -o pipefail
        squeue -h -w {{ hostname_full.stdout }} 2>/dev/null | wc -l || echo "0"
      register: running_jobs
      changed_when: false
      failed_when: false
      
    - name: Mostrar estado actual de jobs
      debug:
        msg: "Jobs corriendo actualmente: {{ running_jobs.stdout }}"
      
    - name: Mostrar lista de jobs si existen
      shell: squeue -w {{ hostname_full.stdout }}
      when: running_jobs.stdout|int > 0
      register: job_list
      changed_when: false
      
    - name: Drainear nodo si hay jobs
      shell: scontrol update NodeName={{ hostname_full.stdout }} State=DRAIN Reason="Limpieza /tmp automática"
      when: running_jobs.stdout|int > 0
      register: drain_result
      
    - name: Esperar a que terminen los jobs
      shell: |
        set -o pipefail
        squeue -h -w {{ hostname_full.stdout }} 2>/dev/null | wc -l || echo "0"
      register: jobs_check
      until: jobs_check.stdout|int == 0
      retries: 1440
      delay: 30
      when: running_jobs.stdout|int > 0
      
    - name: Buscar archivos antiguos para eliminar (excluyendo paths protegidos)
      find:
        paths: /tmp
        age: "{{ mtime_days }}d"
        file_type: file
        excludes: "{{ protected_paths }}"
      register: old_files
      become: yes
      
    - name: Buscar directorios antiguos para eliminar (excluyendo paths protegidos)
      find:
        paths: /tmp
        age: "{{ mtime_days }}d"
        file_type: directory
        excludes: "{{ protected_paths + ['/tmp'] }}"
      register: old_dirs
      become: yes
      
    - name: Mostrar resumen de limpieza
      debug:
        msg: |
          Resumen de limpieza:
          - Archivos a eliminar: {{ old_files.matched }}
          - Directorios a eliminar: {{ old_dirs.matched }}
          - Paths protegidos: {{ protected_paths }}
          
    - name: Eliminar archivos antiguos
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_files.files }}"
      when: old_files.matched > 0
      become: yes
      
    - name: Eliminar directorios antiguos (ordenados por profundidad)
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_dirs.files | sort(attribute='path', reverse=true) }}"
      when: old_dirs.matched > 0
      become: yes
      ignore_errors: yes
      
    - name: Reactivar nodo si fue draineado
      shell: scontrol update NodeName={{ hostname_full.stdout }} State=RESUME
      when: running_jobs.stdout|int > 0 and drain_result is defined
      
    - name: Mostrar uso final de /tmp
      shell: df -h /tmp
      register: final_usage
      changed_when: false
      
    - name: Resultado final
      debug:
        msg: |
          Limpieza completada en {{ hostname_full.stdout }}
          - Archivos eliminados: {{ old_files.matched }}
          - Directorios eliminados: {{ old_dirs.matched }}
          - Uso actual: {{ final_usage.stdout_lines[-1] }}
