---
- name: Limpieza autom치tica de /tmp sin usar directorio temporal del sistema
  hosts: all
  become: yes
  gather_facts: no
  vars:
    ansible_become_exe: "sudo -n"
    ansible_become_flags: ""
    mtime_days: 1
    # Directorio temporal personalizado
    custom_temp_dir: "/var/tmp/ansible_cleanup"
    systemd_paths:
      - "/tmp/systemd-*"
      - "/tmp/.font-unix*"
      - "/tmp/.ICE-unix*" 
      - "/tmp/.Test-unix*"
      - "/tmp/.X11-unix*"
      - "/tmp/.XIM-unix*"
      - "/tmp/snap-private-tmp*"
    
  tasks:
    - name: Crear directorio temporal personalizado en nodo remoto
      file:
        path: "{{ custom_temp_dir }}"
        state: directory
        mode: '0700'
      environment:
        TMPDIR: "{{ custom_temp_dir }}"
        TEMP: "{{ custom_temp_dir }}"

    - name: Obtener hostname completo
      command: hostname -f
      register: hostname_full
      changed_when: false
      environment:
        TMPDIR: "{{ custom_temp_dir }}"
        TEMP: "{{ custom_temp_dir }}"

    - name: Verificar jobs corriendo en SLURM
      shell: squeue -h -w {{ hostname_full.stdout }} 2>/dev/null | wc -l
      register: running_jobs
      changed_when: false
      failed_when: false
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Mostrar jobs corriendo
      shell: squeue -w {{ hostname_full.stdout }}
      when: running_jobs.stdout|int > 0
      register: job_list
      environment:
        TMPDIR: "{{ custom_temp_dir }}"
      
    - name: Drainear nodo si hay jobs
      shell: |
        scontrol update NodeName={{ hostname_full.stdout }} State=DRAIN Reason="Limpieza /tmp autom치tica" || true
      when: running_jobs.stdout|int > 0
      register: drain_result
      failed_when: false
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Esperar a que terminen los jobs
      shell: squeue -h -w {{ hostname_full.stdout }} 2>/dev/null | wc -l
      register: jobs_check
      until: jobs_check.stdout|int == 0
      retries: 1440  # 12 horas m치ximo (1440 * 30s)
      delay: 30
      when: running_jobs.stdout|int > 0
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Buscar archivos antiguos para eliminar (sin .time)
      shell: |
        find /tmp -type f -mtime +{{ mtime_days }} \
        ! -name "*.time" \
        ! -name "aquota.user" \
        ! -name "aquota.group" \
        ! -name "krb5cc*" \
        ! -path "/tmp/systemd-*" \
        ! -path "/tmp/.font-unix*" \
        ! -path "/tmp/.ICE-unix*" \
        ! -path "/tmp/.Test-unix*" \
        ! -path "/tmp/.X11-unix*" \
        ! -path "/tmp/.XIM-unix*" \
        ! -path "/tmp/snap-private-tmp*" | wc -l
      register: old_files_count
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Eliminar archivos antiguos directamente
      shell: |
        find /tmp -type f -mtime +{{ mtime_days }} \
        ! -name "*.time" \
        ! -name "aquota.user" \
        ! -name "aquota.group" \
        ! -name "krb5cc*" \
        ! -path "/tmp/systemd-*" \
        ! -path "/tmp/.font-unix*" \
        ! -path "/tmp/.ICE-unix*" \
        ! -path "/tmp/.Test-unix*" \
        ! -path "/tmp/.X11-unix*" \
        ! -path "/tmp/.XIM-unix*" \
        ! -path "/tmp/snap-private-tmp*" \
        -delete 2>/dev/null || true
      register: delete_files_result
      when: old_files_count.stdout|int > 0
      failed_when: false
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Buscar directorios antiguos para eliminar
      shell: |
        find /tmp -type d -mtime +{{ mtime_days }} \
        ! -path "/tmp/systemd-*" \
        ! -path "/tmp/.font-unix*" \
        ! -path "/tmp/.ICE-unix*" \
        ! -path "/tmp/.Test-unix*" \
        ! -path "/tmp/.X11-unix*" \
        ! -path "/tmp/.XIM-unix*" \
        ! -path "/tmp/snap-private-tmp*" \
        ! -path "/tmp" | wc -l
      register: old_dirs_count
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Eliminar directorios antiguos
      shell: |
        find /tmp -type d -mtime +{{ mtime_days }} \
        ! -path "/tmp/systemd-*" \
        ! -path "/tmp/.font-unix*" \
        ! -path "/tmp/.ICE-unix*" \
        ! -path "/tmp/.Test-unix*" \
        ! -path "/tmp/.X11-unix*" \
        ! -path "/tmp/.XIM-unix*" \
        ! -path "/tmp/snap-private-tmp*" \
        ! -path "/tmp" \
        -exec rmdir {} + 2>/dev/null || true
      register: delete_dirs_result
      when: old_dirs_count.stdout|int > 0
      failed_when: false
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Verificar estado actual del nodo
      shell: scontrol show node {{ hostname_full.stdout }} | grep State
      register: node_state
      when: 
        - running_jobs.stdout|int > 0
        - drain_result is defined
      changed_when: false
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Reactivar nodo solo si estaba en DRAIN
      shell: |
        if scontrol show node {{ hostname_full.stdout }} | grep -q "State=DRAIN"; then
          scontrol update NodeName={{ hostname_full.stdout }} State=RESUME
        else
          echo "Nodo no requiere reactivaci칩n"
        fi
      args:
        executable: /bin/bash
      when: 
        - running_jobs.stdout|int > 0
        - drain_result is defined
      register: resume_result
      failed_when: false
      changed_when: resume_result.rc == 0
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Mostrar uso final de /tmp
      shell: df -h /tmp
      register: final_usage
      changed_when: false
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Limpiar directorio temporal personalizado
      file:
        path: "{{ custom_temp_dir }}"
        state: absent
      environment:
        TMPDIR: "{{ custom_temp_dir }}"

    - name: Resultado final
      debug:
        msg: 
          - "Limpieza completada en {{ hostname_full.stdout }}"
          - "Jobs iniciales: {{ running_jobs.stdout }}"
          - "Archivos eliminados: {{ old_files_count.stdout }}"
          - "Directorios eliminados: {{ old_dirs_count.stdout }}"
          - "Estado del nodo: {{ node_state.stdout | default('OK') }}"
          - "Uso final: {{ final_usage.stdout_lines[-1] }}"
